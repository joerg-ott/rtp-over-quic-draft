



Network Working Group                                             J. Ott
Internet-Draft                                              M. Engelbart
Intended status: Informational               Technical University Munich
Expires: 4 November 2021                                      3 May 2021


                             RTP over QUIC
                  draft-engelbart-rtp-over-quic-latest

Abstract

   TODO Abstract

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the mailing list (), which
   is archived at .

   Source for this draft and an issue tracker can be found at
   https://github.com/mengelbart/rtp-over-quic-draft.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 4 November 2021.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology and Notation
   3.  Protocol Overview
   4.  Local Interfaces
     4.1.  QUIC Interface
     4.2.  Congestion Controller Interface
     4.3.  Codec Interface
   5.  Packet Format
     5.1.  Encoding: Binary representation
     5.2.  "How to transport / encapsulate"
   6.  Protocol Operation
   7.  SDP Signalling
   8.  Enhancements
   9.  Discussion
     9.1.  Impact of Connection Migration
   10. Security Considerations
   11. IANA Considerations
   12. Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   TODO Introduction

2.  Terminology and Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Protocol Overview

   This document introduces a mapping of the Real-time Transport
   Protocol (RTP) to the QUIC transport protocol.  QUIC supports two
   transport methods: reliable streams and unreliable datagrams
   [QUIC-TRANSPORT], [QUIC-DATAGRAM].  RTP over QUIC uses the unreliable
   datagrams to transport real-time data.

   [RFC3550] specifies that RTP sessions need to be transmitted on
   different transport addresses to allow multiplexing between them.
   RTP over QUIC uses a different approach, in order to leverage the
   advantages of QUIC connections without managing a separate QUIC
   connection per RTP session.  QUIC does not provide multiplexing
   between different flows on datagrams, but recommends the use of
   variable-length integers to prepend each datagram with a unique flow
   identifier for multiplexing flows.  RTP over QUIC uses a flow
   identifier as a replacement for network address and port number, to
   multiplex many RTP sessions over the same QUIC connection.

   A congestion controller can be plugged in, to adapt the media bitrate
   to the available bandwidth.  This document does not mandate any
   congestion control algorithm, some examples include Network-Assisted
   Dynamic Adaptation (NADA) [RFC8698] and Self- Clocked Rate Adaptation
   for Multimedia (SCReAM) [RFC8298].  These congestion control
   algorithms require some feedback about the performance of the network
   in order to calculate target bitrates.  Traditionally this feedback
   is generated at the receiver and sent back to the sender via RTCP.
   Since QUIC also collects some metrics about the networks performance,
   these metrics can be used to generate the required feedback at the
   sender-side and provide it to the congestion controller, to avoid the
   additional overhead of the RTCP stream.

      *TODO:* Should the congestion controller work independently from
      the congestion controller used in QUIC, because the QUIC
      connection can simultaneously be used for other data streams, that
      need to be congestion controlled, too?

4.  Local Interfaces

   RTP over QUIC requires different components like QUIC
   implementations, congestion controllers and media encoders to work
   together.  The interfaces of these components have to fulfill certain
   requirements which are described in this section.

4.1.  QUIC Interface

   If the used QUIC implementation is not directly incorporated into the
   RTP over QUIC mapping implementation, it has to fulfill the following
   interface requirements.  The QUIC implementation MUST support QUICs
   unreliable datagrams and it MUST provide a way to signal
   acknowledgements or losses of datagrams to the application.  Since
   datagram frames cannot be fragmented, the QUIC implementation MUST
   provide a way to query the maximum datagram size, so that an
   application can create RTP packets that always fit into a datagram.

   Additionally, a QUIC implementation MUST expose the smoothed RTT as
   descirbed in Section 5 of [QUIC-RECOVERY] to the application.

   Section 7.1 of [QUIC-RECOVERY] also specifies how QUIC treats ECN
   marks if ECN is supported by the network path.  If ECN counts can be
   exported from a QUIC implementation, these may be used to improve
   congestion control as described in the next section.

4.2.  Congestion Controller Interface

   There are different congestion control algorithms proposed by RMCAT
   to implement application layer congestion control for real-time
   communications.  These algorithms keep track of the sent packets and
   typically require a list of received packets together with the
   timestamps at which they were received by a receiver to estimate the
   current bandwidth utilization and whether a media encoder can be
   configured to produce output at a higher or lower rate.

   A congestion controller used for RTP over QUIC should be able to
   compute an adequate bandwidth estimation using the following inputs:

   *  A current timestamp

   *  A list of packets that were acknowledged by the receiver

   *  For each acknowledged packet, a delay between the sent- and
      receive-times of the packet

   *  Minimum and average RTT estimations and the RTT variation as
      calculated by QUIC [QUIC-RECOVERY]

   *  Optionally ECN marks may be used, if supported by the network and
      exposed by the QUIC implementation.

   A congestion controller MUST expose a maximum bitrate to which an
   encoder can safely be configured without overloading the network.
   Additionally a congestion controller may provide a pacing mechanism.

4.3.  Codec Interface

   An application is expected to adapt the media bitrate to the observed
   available bandwidth by setting the media encoder to the target
   bitrate that is computed by the congestion controller.  Thus, the
   media encoder needs to offer a way to update the target bitrate
   accordingly.  An implementation can either expose the most recent
   bitrate estimation produced by the congestion controller, or directly
   take a callback to update the encoder bitrate which is called
   whenever the congestion controller updates its target bitrate.

5.  Packet Format

5.1.  Encoding: Binary representation

   All packets are sent as datagrams with the following format:

   Datagram Payload {
     Flow Identifier (i),
     RTP/RTCP Packet (..)
   }

                     Figure 1: Datagram Payload Format

   For multiplexing streams on the same QUIC connection, each RTP packet
   is prefixed with a flow identifier.  This flow identifier serves as a
   replacement for using different transport addresses per stream.  A
   flow identifier is a QUIC variable length integer which must be
   unique per stream.

5.2.  "How to transport / encapsulate"

6.  Protocol Operation

   This section describes how senders and receivers can exchange RTP
   packets using QUIC.  While the receiver side is very simple, the
   sender side has to keep track of sent packets and corresponding
   acknowledgement to implement congestion control.

   RTP/RTCP packets that are submitted to an RTP over QUIC
   implementation are buffered in a queue.  The congestion controller
   defines the rate at which the next packet is dequeued and sent over
   the QUIC connection.  Before a packet is sent, it is prefixed with
   the flow identifier described in Section 5 and encapsulated in a QUIC
   datagram.

   The implementation has to keep track of sent packets in order to
   build the feedback for a congestion controller described in
   Section 4.2.  Each sent packet is mapped to the datagram in which it
   was sent over QUIC and when the QUIC implementation signals an
   acknowledgement for a specific datagram, the packet that was sent in
   this datagram is marked as received.  Together with the received
   mark, an estimation of the delay at which the packet was received by
   the peer can be stored.  This estimation can be calculated from the
   RTT exposed by QUIC.

   Depending on the requirements of the used congestion controll
   algorithm, a feedback report including the information described in
   Section 4.2 can then be generated and passed to the congestion
   controller.  The feedback report can be passed to the congestion
   controller at a frequency specified by the used algorithm.

   The congestion controller regularly outputs a target bitrate, which
   is forwarded to the encoder using the interface described in
   Section 4.3.

   +------------+ Media  +-------------+
   |  Encoder   |------->| Application |
   |            |        |             |
   +------------+        +-------------+
         ^                      |
         |                      |
         | Set             RTP/ |
         | Target          RTCP |
         | bitrate              |
         |                      v        Target
         |               +-------------+ Bitrate   +-------------+
         +---------------|  RTP over   |<----------| Congestion  |
                         |    QUIC     | Feedback  | Controller  |
                         +-------------+---------->+-------------+
                              |   ^
                      Flow ID |   | Datagram
                     prefixed |   | ACK/Lost-
                     RTP/RTCP |   | notification
                      packets |   | +
                              |   | RTT
                              v   |
                         +-------------+
                         |    QUIC     |
                         |             |
                         +-------------+

                     Figure 2: RTP over QUIC send flow

   On receiving a datagram, a RTP over QUIC implementation strips off
   and parses the flow identifier to identify the stream to which the
   received RTP packet belongs.  The remaining content of the datagram
   is then passed to the RTP session which was assigned the given flow
   identifier.

7.  SDP Signalling

      *TODO:* Describe how SDP can be used to setup session, e.g. assign
      flow IDs.

      *TODO:* How to deal with different applications using Datagrams on
      the same QUIC connection?

8.  Enhancements

   The RTT measured by QUIC may not be very precise because it can be
   influenced by delayed ACKs.  An alternative the RTT is to explicitly
   measure a one way delay.  [QUIC-TS] suggests an extension for QUIC to
   implement one way delay measurements using a timestamp carried in a
   special QUIC frame.  The new frame carries the time at which a packet
   was sent.  This timestamp can be used by the receiver to estimate a
   one way delay as the difference between the time at which a packet
   was received and the timestamp in the received packet.  The one way
   delay can then be used as a replacement for the receive time
   estimation derived from the RTT as described in Section 6.

      *TODO:* Using OWD in ACKS tells a sender the OWD from receiver to
      sender, but we might be more interested in OWD from sender to
      receiver so maybe we need some RTCP feedback?

9.  Discussion

9.1.  Impact of Connection Migration

10.  Security Considerations

   TODO Security

11.  IANA Considerations

   This document has no IANA actions.

12.  Normative References

   [QUIC-DATAGRAM]
              Pauly, T., Ed., Kinnear, E., Ed., and D. Schinazi, Ed.,
              "An Unreliable Datagram Extension to QUIC", Work in
              Progress, Internet-Draft, draft-ietf-quic-datagram-02,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              datagram-02.txt>.

   [QUIC-RECOVERY]
              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection
              and Congestion Control", Work in Progress, Internet-Draft,
              draft-ietf-quic-recovery-34,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              recovery-34.txt>.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", Work in Progress,
              Internet-Draft, draft-ietf-quic-transport-34,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              transport-34.txt>.

   [QUIC-TS]  Huitema, C., Ed., "Quic Timestamps For Measuring One-Way
              Delays", Work in Progress, Internet-Draft, draft-huitema-
              quic-ts-05, <https://datatracker.ietf.org/doc/html/draft-
              huitema-quic-ts-05.txt>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, DOI 10.17487/RFC3550,
              July 2003,
              <https://datatracker.ietf.org/doc/html/rfc3550>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

   [RFC8298]  Johansson, I. and Z. Sarker, "Self-Clocked Rate Adaptation
              for Multimedia", RFC 8298, DOI 10.17487/RFC8298, December
              2017, <https://datatracker.ietf.org/doc/html/rfc8298>.

   [RFC8698]  Zhu, X., Pan, R., Ramalho, M., and S. Mena, "Network-
              Assisted Dynamic Adaptation (NADA): A Unified Congestion
              Control Scheme for Real-Time Media", RFC 8698,
              DOI 10.17487/RFC8698, February 2020,
              <https://datatracker.ietf.org/doc/html/rfc8698>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Jörg Ott
   Technical University Munich

   Email: ott@in.tum.de


   Mathis Engelbart
   Technical University Munich

   Email: mathis.engelbart@tum.de
