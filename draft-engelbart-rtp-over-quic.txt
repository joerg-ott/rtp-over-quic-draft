



Network Working Group                                             J. Ott
Internet-Draft                                              M. Engelbart
Intended status: Informational               Technical University Munich
Expires: 18 November 2021                                    17 May 2021


                             RTP over QUIC
                  draft-engelbart-rtp-over-quic-latest

Abstract

   This document specifies a minimal mapping for encapsulating RTP and
   RTCP packets within QUIC.  It also discusses how to leverage state
   from the QUIC implementation in the endpoints to reduce the exchange
   of RTCP packets.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the mailing list (), which
   is archived at .

   Source for this draft and an issue tracker can be found at
   https://github.com/mengelbart/rtp-over-quic-draft.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 18 November 2021.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology and Notation
   3.  Protocol Overview
   4.  Local Interfaces
     4.1.  QUIC Interface
     4.2.  Congestion Controller Interface
     4.3.  Codec Interface
   5.  Packet Format
     5.1.  Encoding: Binary representation
     5.2.  "How to transport / encapsulate"
   6.  Protocol Operation
   7.  SDP Signalling
   8.  Used RTP/RTCP packet types
   9.  Enhancements
   10. Discussion
     10.1.  Impact of Connection Migration
   11. Security Considerations
   12. IANA Considerations
   13. Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Real-time Transport Protocol (RTP) [RFC3550] is generally used to
   carry real-time media for conversational media sessions, such as
   video conferences, across the Internet.  Since RTP requires real-time
   delivery and is tolerant to packet losses, the default underlying
   transport protocol has been UDP, recently with DTLS on top to secure
   the media exchange and occasionallly TCP (and possibly TLS) as
   fallback.  With the advent of QUIC and, most notably, its unreliable
   DATAGRAM extension, another secure transport protocol becomes
   avaialble.  QUIC and its DATAGRAMs combine desirable properties for
   real-time traffic (e.g., no unnecessary retransmissions, avoiding
   head-of-line blocking) with a secure end-to-end transport that is
   also expected to work well through NATs and firewalls.

   Moreover, with QUIC's multiplexing capabilities, reliable and
   unreliable transport connections as, e.g., needed for WebRTC, can be
   established with only a single port used at either end of the
   connection.  This document defines a mapping of how to carry RTP over
   QUIC.  The focus is on RTP and RTCP packet mapping and on reducing
   the amount of RTCP traffic by leveraging state information readily
   available within a QUIC endpoint.  This document also briefly touches
   upon how to signal media over QUIC using the Session Description
   Protocol (SDP) [RFC4566].

   The scope of this document is limited to unicast RTP/RTCP.

2.  Terminology and Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Protocol Overview

   This document introduces a mapping of the Real-time Transport
   Protocol (RTP) to the QUIC transport protocol.  QUIC supports two
   transport methods: reliable streams and unreliable datagrams
   [QUIC-TRANSPORT], [QUIC-DATAGRAM].  RTP over QUIC uses the unreliable
   datagrams to transport real-time data.

   [RFC3550] specifies that RTP sessions need to be transmitted on
   different transport addresses to allow multiplexing between them.
   RTP over QUIC uses a different approach, in order to leverage the
   advantages of QUIC connections without managing a separate QUIC
   connection per RTP session.  QUIC does not provide multiplexing
   between different flows on datagrams, but recommends the use of
   variable-length integers to prepend each datagram with a unique flow
   identifier for multiplexing flows.  RTP over QUIC uses a flow
   identifier as a replacement for network address and port number, to
   multiplex many RTP sessions over the same QUIC connection.

   A congestion controller can be plugged in, to adapt the media bitrate
   to the available bandwidth.  This document does not mandate any
   congestion control algorithm, some examples include Network-Assisted
   Dynamic Adaptation (NADA) [RFC8698] and Self-Clocked Rate Adaptation
   for Multimedia (SCReAM) [RFC8298].  These congestion control
   algorithms require some feedback about the performance of the network
   in order to calculate target bitrates.  Traditionally this feedback
   is generated at the receiver and sent back to the sender via RTCP.
   Since QUIC also collects some metrics about the networks performance,
   these metrics can be used to generate the required feedback at the
   sender-side and provide it to the congestion controller, to avoid the
   additional overhead of the RTCP stream.

      *TODO:* Should the congestion controller work independently from
      the congestion controller used in QUIC, because the QUIC
      connection can simultaneously be used for other data streams, that
      need to be congestion controlled, too?

4.  Local Interfaces

   RTP over QUIC requires different components like QUIC
   implementations, congestion controllers and media encoders to work
   together.  The interfaces of these components have to fulfill certain
   requirements which are described in this section.

4.1.  QUIC Interface

   If the used QUIC implementation is not directly incorporated into the
   RTP over QUIC mapping implementation, it has to fulfill the following
   interface requirements.  The QUIC implementation MUST support QUICs
   unreliable datagrams and it MUST provide a way to signal
   acknowledgements or losses of datagrams to the application.  Since
   datagram frames cannot be fragmented, the QUIC implementation MUST
   provide a way to query the maximum datagram size, so that an
   application can create RTP packets that always fit into a datagram.

   Additionally, a QUIC implementation MUST expose the recorded RTT
   statistics as described in Section 5 of [QUIC-RECOVERY] to the
   application.  These statistics include the minium observed RTT over a
   period of time (min_rtt), exponentially-weighted moving average
   (smoothed_rtt) and the mean deviation (rttvar).  These values are
   necessary to perform congestion control as explained in Section 4.2.

   Section 7.1 of [QUIC-RECOVERY] also specifies how QUIC treats ECN
   marks if ECN is supported by the network path.  If ECN counts can be
   exported from a QUIC implementation, these may be used to improve
   congestion control, too.

4.2.  Congestion Controller Interface

   There are different congestion control algorithms proposed by RMCAT
   to implement application layer congestion control for real-time
   communications.  To estimate the currently available bandwidth, these
   algorithms keep track of the sent packets and typically require a
   list of received packets together with the timestamps at which they
   were received by a receiver.  The bandwidth estimation can then be
   used to decide, whether the media encoder can be configured to
   produce output at a higher or lower rate.

   A congestion controller used for RTP over QUIC should be able to
   compute an adequate bandwidth estimation using the following inputs:

   *  A current timestamp

   *  A list of packets that were acknowledged by the receiver

   *  For each acknowledged packet, a delay between the sent- and
      receive-timestamps of the packet

   *  Minimum and average RTT estimations and the RTT variation as
      calculated by QUIC [QUIC-RECOVERY]

   *  Optionally ECN marks may be used, if supported by the network and
      exposed by the QUIC implementation.

   A congestion controller MUST expose a target bitrate to which the
   encoder should be configured and may additionally provide a pacing
   mechanism.

4.3.  Codec Interface

   An application is expected to adapt the media bitrate to the observed
   available bandwidth by setting the media encoder to the target
   bitrate that is computed by the congestion controller.  Thus, the
   media encoder needs to offer a way to update the target bitrate
   accordingly.  An implementation can either expose the most recent
   bitrate estimation produced by the congestion controller, or directly
   take a callback to update the encoder bitrate which is called
   whenever the congestion controller updates its target bitrate.

5.  Packet Format

5.1.  Encoding: Binary representation

   All packets MUST be sent as datagrams with the following format:

   Datagram Payload {
     Flow Identifier (i),
     RTP/RTCP Packet (..)
   }

                     Figure 1: Datagram Payload Format

   For multiplexing streams on the same QUIC connection, each RTP packet
   is prefixed with a flow identifier.  This flow identifier serves as a
   replacement for using different transport addresses per stream.  A
   flow identifier is a QUIC variable length integer which must be
   unique per stream.

   RTP and RTCP packets of a single RTP session MAY be sent using the
   same flow identifier (following the procedures defined in [RFC5761],
   or they MAY be sent using different flow identifiers.  The respective
   mode of operation MUST be indicated using the appropriate signaling,
   e.g., when using SDP as discussed in section {#sdp}.

   RTP and RTCP packets of different RTP sessions MUST be sent using
   different flow identifiers.

   Differentiating RTP/RTCP datagrams of different RTP sessions from
   non-RTP/RTCP datagrams is the responsibility of the application by
   means of appropriate use of flow identifiers and the corresponding
   signaling.

5.2.  "How to transport / encapsulate"

   RTP senders SHOULD consider the header overhead assosiated with QUIC
   datagrams and sure that the RTP/RTCP packets including their
   payloads, QUIC, and IP headers will fit into path MTU.

   What else?

   *  When to send a packet? (re congestion control)

   *  ...

6.  Protocol Operation

   This section describes how senders and receivers can exchange RTP
   packets using QUIC.  While the receiver side is very simple, the
   sender side has to keep track of sent packets and corresponding
   acknowledgements to implement congestion control.

   RTP/RTCP packets that are submitted to an RTP over QUIC
   implementation are buffered in a queue.  The congestion controller
   defines the rate at which the next packet is dequeued and sent over
   the QUIC connection.  Before a packet is sent, it is prefixed with
   the flow identifier described in Section 5 and encapsulated in a QUIC
   datagram.

   The implementation has to keep track of sent packets in order to
   build the feedback for a congestion controller described in
   Section 4.2.  Each sent packet is mapped to the datagram in which it
   was sent over QUIC.  When the QUIC implementation signals an
   acknowledgement for a specific datagram, the packet that was sent in
   this datagram is marked as received.  Together with the received
   mark, an estimation of the delay at which the packet was received by
   the peer can be stored.  Assuming the RTT is divided equally between
   the link from the sender to the receiver and the link back to the
   sender, this estimation can be calculated using the RTT exposed by
   QUIC divided by two.

   Depending on the requirements of the used congestion controll
   algorithm, a feedback report including the information described in
   Section 4.2 can then be generated and passed to the congestion
   controller.  The feedback report can be passed to the congestion
   controller at a frequency specified by the used algorithm.

   The congestion controller regularly outputs a target bitrate, which
   is forwarded to the encoder using the interface described in
   Section 4.3.

   +------------+ Media  +-------------+
   |  Encoder   |------->| Application |
   |            |        |             |
   +------------+        +-------------+
         ^                      |
         |                      |
         | Set             RTP/ |
         | Target          RTCP |
         | bitrate              |
         |                      v        Target
         |               +-------------+ Bitrate   +-------------+
         +---------------|  RTP over   |<----------| Congestion  |
                         |    QUIC     | Feedback  | Controller  |
                         +-------------+---------->+-------------+
                              |   ^
                      Flow ID |   | Datagram
                     prefixed |   | ACK/Lost-
                     RTP/RTCP |   | notification
                      packets |   | +
                              |   | RTT
                              v   |
                         +-------------+
                         |    QUIC     |
                         |             |
                         +-------------+

                     Figure 2: RTP over QUIC send flow

   On receiving a datagram, an RTP over QUIC implementation strips off
   and parses the flow identifier to identify the stream to which the
   received RTP packet belongs.  The remaining content of the datagram
   is then passed to the RTP session which was assigned the given flow
   identifier.

7.  SDP Signalling

   QUIC is a connection-based protocol that supports connectionless
   transmissions of DATAGRAM frames within an established connection.
   As noted above, demultiplexing DATAGRAMS intended for different
   purposes is up to the application using QUIC.

   There are three necessary steps to carry out jointly between the
   communicating peers to enable RTP over QUIC:

   1.  The peers need to decide whether to establish a new QUIC
       connection or whether to re-use an existing one.  In case of
       establishing a new connection, the initiator and the responder
       (client and server) need to be determined.  Signaling for this
       step MUST follow [RFC4572] on SDP attributes for connection-
       oriented media.

   2.  The peers must provide a mapping of RTP sessions to flow
       identifiers, which is conceptually similar to signaling port
       numbers for demultiplexing.  To this end, all media specified in
       SDP to use the same QUIC connection MUST share a common c= line
       to signal the IP address and MUST all use the same port number --
       that of the QUIC connection -- in the m= line.

       Flow identifiers MUST be treated independently for each direction
       of transmission, so that an endpoint MAY choose its own flow
       identifies and only uses SDP to inform its peer which RTP
       sessions use which flow identifiers.

       To this end, SDP MUST be used to indicate the repsective flow
       identifiers for RTP and RTCP of the different RTP sessions (for
       which we borrow inspiration from [RFC3605]).

       *TODO:* check [RFC8122] [RFC8843]

   3.  The peers MUST agree, for each RTP session, where or not to apply
       RTP/RTCP multiplexing.  If multiplexing RTP and RTCP shall take
       place on the same flow identifier, this MUST be indicated using
       the attribute a=rtcp-mux.

       If RTP/RTCP multiplexing is used, the flow identifiers for the
       RTP and the RTCP flows MUST be identical.

      *TODO:* Describe how SDP can be used to setup session, e.g. assign
      flow IDs.

      *TODO:* How to deal with different applications using Datagrams on
      the same QUIC connection?

8.  Used RTP/RTCP packet types

   Any RTP packet can be sent over QUIC and no RTCP packets are used by
   default.  Since QUIC already includes some features which are usually
   implemented by certain RTCP messages, RTP over QUIC implementations
   should not need to implement the following RTCP messages:

   *  PT=205, FMT=1, Name=Generic NACK: Provides Negative
      Acknowledgements [RFC4585].  Acknowledgement and loss
      notifications are already provided by the QUIC connection.

   *  PT=205, FMT=8, Name=RTCP-ECN-FB: Provides RTCP ECN Feedback
      [RFC6679].  If supported, ECN may directly be exposed by the used
      QUIC implementation.

   *  PT=205, FMT=11, Name=CCFB: RTP Congestion Control Feedback which
      contains receive marks, timestamps and ECN notifications for each
      received packet [RFC8888].  This can be inferred from QUIC as
      described in Section 6.

   *  PT=210, FMT=all, Name=Token, [RFC6284] specifies a way to
      dynamically assign ports for RTP receivers.  Since QUIC
      connections manage ports on their own, this is not required for
      RTP over QUIC.

9.  Enhancements

   The RTT measured by QUIC may not be very precise because it can be
   influenced by delayed ACKs.  An alternative the RTT is to explicitly
   measure a one way delay.  [QUIC-TS] suggests an extension for QUIC to
   implement one way delay measurements using a timestamp carried in a
   special QUIC frame.  The new frame carries the time at which a packet
   was sent.  This timestamp can be used by the receiver to estimate a
   one way delay as the difference between the time at which a packet
   was received and the timestamp in the received packet.  The one way
   delay can then be used as a replacement for the receive time
   estimation derived from the RTT as described in Section 6.

      *TODO:* Using OWD in ACKS tells a sender the OWD from receiver to
      sender, but we might be more interested in OWD from sender to
      receiver so maybe we need to specify some RTCP feedback in the
      previous section?

10.  Discussion

10.1.  Impact of Connection Migration

11.  Security Considerations

   TODO Security

12.  IANA Considerations

   This document has no IANA actions.

13.  Normative References

   [QUIC-DATAGRAM]
              Pauly, T., Ed., Kinnear, E., Ed., and D. Schinazi, Ed.,
              "An Unreliable Datagram Extension to QUIC", Work in
              Progress, Internet-Draft, draft-ietf-quic-datagram-02,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              datagram-02.txt>.

   [QUIC-RECOVERY]
              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection
              and Congestion Control", Work in Progress, Internet-Draft,
              draft-ietf-quic-recovery-34,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              recovery-34.txt>.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", Work in Progress,
              Internet-Draft, draft-ietf-quic-transport-34,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              transport-34.txt>.

   [QUIC-TS]  Huitema, C., Ed., "Quic Timestamps For Measuring One-Way
              Delays", Work in Progress, Internet-Draft, draft-huitema-
              quic-ts-05, <https://datatracker.ietf.org/doc/html/draft-
              huitema-quic-ts-05.txt>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, DOI 10.17487/RFC3550,
              July 2003,
              <https://datatracker.ietf.org/doc/html/rfc3550>.

   [RFC3605]  Huitema, C., "Real Time Control Protocol (RTCP) attribute
              in Session Description Protocol (SDP)", RFC 3605,
              DOI 10.17487/RFC3605, October 2003,
              <https://datatracker.ietf.org/doc/html/rfc3605>.

   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, "SDP: Session
              Description Protocol", RFC 4566, DOI 10.17487/RFC4566,
              July 2006,
              <https://datatracker.ietf.org/doc/html/rfc4566>.

   [RFC4572]  Lennox, J., "Connection-Oriented Media Transport over the
              Transport Layer Security (TLS) Protocol in the Session
              Description Protocol (SDP)", RFC 4572,
              DOI 10.17487/RFC4572, July 2006,
              <https://datatracker.ietf.org/doc/html/rfc4572>.

   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,
              "Extended RTP Profile for Real-time Transport Control
              Protocol (RTCP)-Based Feedback (RTP/AVPF)", RFC 4585,
              DOI 10.17487/RFC4585, July 2006,
              <https://datatracker.ietf.org/doc/html/rfc4585>.

   [RFC5761]  Perkins, C. and M. Westerlund, "Multiplexing RTP Data and
              Control Packets on a Single Port", RFC 5761,
              DOI 10.17487/RFC5761, April 2010,
              <https://datatracker.ietf.org/doc/html/rfc5761>.

   [RFC6284]  Begen, A., Wing, D., and T. Van Caenegem, "Port Mapping
              between Unicast and Multicast RTP Sessions", RFC 6284,
              DOI 10.17487/RFC6284, June 2011,
              <https://datatracker.ietf.org/doc/html/rfc6284>.

   [RFC6679]  Westerlund, M., Johansson, I., Perkins, C., O'Hanlon, P.,
              and K. Carlberg, "Explicit Congestion Notification (ECN)
              for RTP over UDP", RFC 6679, DOI 10.17487/RFC6679, August
              2012, <https://datatracker.ietf.org/doc/html/rfc6679>.

   [RFC8122]  Lennox, J. and C. Holmberg, "Connection-Oriented Media
              Transport over the Transport Layer Security (TLS) Protocol
              in the Session Description Protocol (SDP)", RFC 8122,
              DOI 10.17487/RFC8122, March 2017,
              <https://datatracker.ietf.org/doc/html/rfc8122>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

   [RFC8298]  Johansson, I. and Z. Sarker, "Self-Clocked Rate Adaptation
              for Multimedia", RFC 8298, DOI 10.17487/RFC8298, December
              2017, <https://datatracker.ietf.org/doc/html/rfc8298>.

   [RFC8698]  Zhu, X., Pan, R., Ramalho, M., and S. Mena, "Network-
              Assisted Dynamic Adaptation (NADA): A Unified Congestion
              Control Scheme for Real-Time Media", RFC 8698,
              DOI 10.17487/RFC8698, February 2020,
              <https://datatracker.ietf.org/doc/html/rfc8698>.

   [RFC8843]  Holmberg, C., Alvestrand, H., and C. Jennings,
              "Negotiating Media Multiplexing Using the Session
              Description Protocol (SDP)", RFC 8843,
              DOI 10.17487/RFC8843, January 2021,
              <https://datatracker.ietf.org/doc/html/rfc8843>.

   [RFC8888]  Sarker, Z., Perkins, C., Singh, V., and M. Ramalho, "RTP
              Control Protocol (RTCP) Feedback for Congestion Control",
              RFC 8888, DOI 10.17487/RFC8888, January 2021,
              <https://datatracker.ietf.org/doc/html/rfc8888>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Jörg Ott
   Technical University Munich

   Email: ott@in.tum.de


   Mathis Engelbart
   Technical University Munich

   Email: mathis.engelbart@tum.de
